/*
 * hourPanel.java
 *
 * Created on 28/08/2009, 16:37:34
 *
 */
package TBA.Client.Main;

import TBA.Client.GUI.AddEntryDialog;
import TBA.Client.GUI.jImagePanel;
import TBA.Data.Entry;
import TBA.Data.SessionState;
import TBA.Events.TBAEvent;
import TBA.Events.TBAEventListener;
import TBA.Images.ImageResources;
import TBA.Sounds.SoundResources;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;

/**
 * This hourPanel class represents the hours in a day. 12 of these are contained
 * in a DayPanel.
 * @author Joseph Neasy
 * @author Dan McGrath
 */
public class hourPanel extends jImagePanel
{
   private Entry aEntry = null;
   private Calendar currentDay;
   private JLabel fadeLeft;
   private JLabel fadeRight;
   private ImageResources imageResources;
   private SoundResources soundResources;
   private Timer cellRefresher;
   private SessionState session;

   /**
    * This method is to register for {@link TBA.Events.TBAEvent}
    * @param listener
    */
   public void addTBAEventListener(TBAEventListener listener)
   {
      listenerList.add(TBAEventListener.class, listener);
   }

   /**
    * This method is to unregister for {@link TBA.Events.TBAEvent}
    * @param listener
    */
   public void removeTBAEventListener(TBAEventListener listener)
   {
      listenerList.remove(TBAEventListener.class, listener);
   }

   /**
    * This private method is used to fire {@link TBA.Events.TBAEvent}
    */
   private void fireTBAEvent(TBAEvent evt)
   {
      Object[] listeners = listenerList.getListenerList();
      for (int listnerNum = 0; listnerNum < listeners.length; listnerNum += 2)
      {
         if (listeners[listnerNum] == TBAEventListener.class)
         { // First one is the class, second is the instance. Hence the + 1.
            ((TBAEventListener)listeners[listnerNum + 1]).TBAEventOccurred(evt);
         }
      }
   }

   /**
    * This method sets up {@link ImageResources} class used to change background colours
    * @param imageResources
    * @see TBA.Client.Main.DayPanel#setImageResources(TBA.Images.ImageResources)
    */
   public void setImageResources(ImageResources imageResources)
   {
      this.imageResources = imageResources;
      setBackgroundImage(switchBackground());
      repaint();
   }

    /**
    * this method is for pushing down sound resources
    * @param soundResources - gets pushed from daypanel
    */
    public void setSoundResources(SoundResources soundResources) {
        this.soundResources = soundResources;
    }

   /**
    * Sets the transparency drag panels that may need to get repainted.
    * @param fadeLeft Left transparency drag panel that may need to get repainted.
    * @param fadeRight Right transparency drag panel that may need to get repainted.
    * @see TBA.Client.Main.DayPanel#setFadeLeft(javax.swing.JLabel, javax.swing.JLabel)
    */
   public void setFadeLeft(JLabel fadeLeft, JLabel fadeRight)
   {
      this.fadeLeft = fadeLeft;
      this.fadeRight = fadeRight;
   }

   AddEntryDialog entryForm;

   /** Creates new form hourPanel */
   public hourPanel()
   {
      initComponents();

      setBackgroundImage(switchBackground());
      cellRefresher = new Timer(10000, new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            ImageIcon temp = switchBackground();
            if(!temp.equals(getBackgroundImage()))
            {
               setBackgroundImage(temp);
               repaint();
               fadeLeft.repaint();
               fadeRight.repaint();
            }
         }
      });
      cellRefresher.start();
   }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subjectLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });
        setLayout(new java.awt.GridLayout(0, 1));

        subjectLabel.setBackground(new java.awt.Color(0, 0, 0));
        subjectLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        subjectLabel.setDoubleBuffered(true);
        add(subjectLabel);

        timeLabel.setBackground(new java.awt.Color(0, 0, 0));
        timeLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        timeLabel.setDoubleBuffered(true);
        add(timeLabel);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseEntered
    {//GEN-HEADEREND:event_formMouseEntered
        setBackgroundImage(imageResources.selectCell);
        repaint();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseExited
    {//GEN-HEADEREND:event_formMouseExited
        setBackgroundImage(switchBackground());
        repaint();
        fadeLeft.repaint();
        fadeRight.repaint();
    }//GEN-LAST:event_formMouseExited

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() == 2 && session.getActiveUser() != null)
        {
            entryForm = new AddEntryDialog(null, true);
            entryForm.addComponentListener(new java.awt.event.ComponentAdapter()
            {
               @Override
               public void componentHidden(java.awt.event.ComponentEvent e)
               {
                  fireTBAEvent(null);
               }
            });
            
            entryForm.setEntry(aEntry);
            entryForm.setSession(session);
            entryForm.setCurrentDay(currentDay);
            entryForm.setFromToDate();
            entryForm.setVisible(true);
        }
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables

   /**
    * This method returns the entry that a cell is set to
    * @return aEntry - entry cell is set to
    */
   public Entry getEntry() {
     return aEntry;
   }

   /**
    * This method will display an entry's info into a cell
    * @param aEntry - entry whose properties will be displayed
    */
    @SuppressWarnings("static-access")
   public void setEntry(Entry aEntry)
   {
     this.aEntry = aEntry;
     if (aEntry != null)
     {
         subjectLabel.setText("  "+this.aEntry.getSubject());

         int startHour, startMin, endHour, endMin;
         String sMin = new String(), eMin = new String();
         startHour = aEntry.getStart().get(Calendar.HOUR_OF_DAY);
         startMin = aEntry.getStart().get(Calendar.MINUTE);
         if(startMin<10)
             sMin = "0"+ Integer.toString(startMin);
         else
             sMin = Integer.toString(startMin);

         endHour = aEntry.getEnd().get(Calendar.HOUR_OF_DAY);
         endMin = aEntry.getEnd().get(Calendar.MINUTE);
         if(endMin<10)
             eMin = "0"+ Integer.toString(endMin);
         else
             eMin = Integer.toString(endMin);
         
         timeLabel.setText(startHour+":"+sMin+"-"+endHour+":"+eMin+"  ");
         
     }
     else
     {
         subjectLabel.setText("");
         timeLabel.setText("");
     }
     setBackgroundImage(switchBackground());
   }

   /**
    * This method changes the background colour of a cell
    * soon = green, yellow = next, now = red, past = grey
    * play sound going from yellow to red
    * @return
    */
   private ImageIcon switchBackground()
   {
      Calendar now = Calendar.getInstance();
      if(imageResources == null)
      {
         return null;
      }
      
      if(aEntry == null)
      {
         return imageResources.backCell;
      }
      //if entry no have start end date :)
      if(aEntry.getStart() == null || aEntry.getEnd() == null)
      {
         return imageResources.backCell;
      }
      //if entry in past
      if(aEntry.getEnd().before(now))
      {
         return imageResources.pastCell;
      }
      //if entry now
      if(aEntry.getStart().before(now))
      {
         // Already tested End by here
         if(aEntry.shouldNotify())
         {
            soundResources.playNow();
            aEntry.hasNotified(true);
         }

         return imageResources.nowCell;
      }

      now.add(Calendar.HOUR, 1);
      if(aEntry.getStart().before(now))
      {
         return imageResources.nextCell;
      }

      now.add(Calendar.HOUR, 1);
      int nowDay = now.get(Calendar.DAY_OF_YEAR);
      int nowYear = now.get(Calendar.YEAR);
      int day = aEntry.getStart().get(Calendar.DAY_OF_YEAR);
      int year = aEntry.getStart().get(Calendar.YEAR);

      if(nowDay >= day && nowYear == year)
      {
         return imageResources.soonCell;
      }

      return imageResources.backCell; // This is the future cell
   }

   /**
    * Setter for currentDay field
    * @param currentDay
    */
    public void setCurrentDay(Calendar currentDay) {
        this.currentDay = (Calendar)currentDay.clone();
    }

   /**
    * Give this class a pointer to the SessionState object.
    * @param session The SessionState
    */
   public void setSession(SessionState session)
   {
      this.session = session;
   }
}