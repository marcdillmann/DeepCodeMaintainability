/*
 * AddEntryDialog.java
 *
 * Created on 4/09/2009, 16:51:16
 */

package TBA.Client.GUI;

import TBA.Data.Entry;
import TBA.Data.SessionState;
import java.awt.Component;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;

/**
 *
 * @author Joseph Neasy
 * @author Dan McGrath
 */
public class AddEntryDialog extends javax.swing.JDialog
{
   private Entry aEntry;
   private Calendar currentDay, fromDate = Calendar.getInstance(), toDate = Calendar.getInstance();
   private SessionState session;
    private DateFormat spinner;
    private DatePick picker = new DatePick(null, true);
    private boolean fromFlag = false, toFlag = false;
   //private JDatePicker fromDate = new JDatePicker();

    /**
     * This method sets an entry for this dialog that makes it display
     * subject/body on screen from respective entry fields
     * @param aEntry
     */
   public void setEntry(Entry aEntry)
   {
      if (aEntry != null)
      {
         DeleteButton.setEnabled(true);
         this.aEntry = aEntry;
         subjectText.setText(aEntry.getSubject());
         bodyText.setText(aEntry.getBody());
         this.setTitle(aEntry.getSubject());
      }
      else
      {

          DeleteButton.setEnabled(false);
      }
   }

   /** Creates new form AddEntryDialog
    * @param parent
    * @param modal
    */
    public AddEntryDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("New Entry");
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new jImagePanel();
        jLabel3 = new javax.swing.JLabel();
        subjectText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bodyText = new javax.swing.JTextArea();
        cancelButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(null);
        setModalExclusionType(null);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("To:");

        subjectText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectTextActionPerformed(evt);
            }
        });
        subjectText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                subjectTextKeyTyped(evt);
            }
        });

        jLabel2.setText("From:");

        jLabel1.setText("Subject:");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));
        jPanel2.setName("Details:"); // NOI18N
        jPanel2.setOpaque(false);

        bodyText.setColumns(20);
        bodyText.setLineWrap(true);
        bodyText.setRows(1);
        bodyText.setWrapStyleWord(true);
        bodyText.setOpaque(false);
        jScrollPane1.setViewportView(bodyText);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addContainerGap())
        );

        cancelButton.setText("Exit without changing");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Save and Exit");
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));
        jSpinner1.setEditor(new JSpinner.DateEditor(jSpinner1, "dd MMM yyyy - h:mm a"));
        jSpinner1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSpinner1MouseClicked(evt);
            }
        });
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jSpinner2.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));
        jSpinner2.setEditor(new JSpinner.DateEditor(jSpinner2, "dd MMM yyyy - h:mm a"));
        jSpinner2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSpinner2MouseClicked(evt);
            }
        });
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setEditable(true);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Reschedule to ...", "One day from now", "One week from now", "One month from now", "One year from now" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(316, 316, 316))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(subjectText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, 0, 0, Short.MAX_VALUE)
                                .addGap(33, 33, 33)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(145, 145, 145))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(539, 539, 539))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jSpinner1, jSpinner2});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(subjectText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteButton)
                    .addComponent(cancelButton)
                    .addComponent(updateButton))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        if (!performCheck())
        {
            JOptionPane.showConfirmDialog((Component)null, "Incorrect field usage, Please check.", "Entry Error", JOptionPane.DEFAULT_OPTION);
        }
        else
        {
            Entry thisEntry = aEntry;
            if (thisEntry == null)
            {
                thisEntry = new Entry();
            }
            fromDate.setTime((Date) jSpinner1.getValue());
            toDate.setTime((Date) jSpinner2.getValue());
            
            thisEntry.hasNotified(false);
            thisEntry.setModified(true);
            thisEntry.setSubject(subjectText.getText());
            thisEntry.setBody(bodyText.getText());
            thisEntry.setStart(fromDate);
            thisEntry.setEnd((toDate));

            if (aEntry == null)
            {
                session.getActiveDiary().addEntry(thisEntry);
                aEntry = thisEntry;
            }

            session.setUpdate();
            this.setVisible(false);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked

    }//GEN-LAST:event_updateButtonMouseClicked

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
      for (Entry nextEntry :  session.getActiveDiary().getActiveEntries())
      {
         if (nextEntry.getID() == aEntry.getID())
         {
            nextEntry.setDeleted(true);
            nextEntry.setModified(true);
         }
      }
      session.setUpdate();
      this.setVisible(false);
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void subjectTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectTextActionPerformed
        this.setTitle(subjectText.getText());
    }//GEN-LAST:event_subjectTextActionPerformed

    private void subjectTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subjectTextKeyTyped
        this.setTitle(subjectText.getText());
    }//GEN-LAST:event_subjectTextKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        fromDate.setTime((Date) jSpinner1.getValue());
        picker.setjDatePickCalender(fromDate);
        PointerInfo a = MouseInfo.getPointerInfo();
        Point xy = a.getLocation();
        picker.setLocation(xy);

        picker.setVisible(true);
        jSpinner1.setValue(picker.getjDatePickCalender().getTime());
        fromDate.setTime((Date) jSpinner1.getValue());
        fromFlag = true;

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        toDate.setTime((Date) jSpinner2.getValue());
       // DatePick picker = new DatePick(null, true);
        PointerInfo a = MouseInfo.getPointerInfo();
        Point xy = a.getLocation();
        picker.setLocation(xy);
        picker.setjDatePickCalender(toDate);
        picker.setVisible(true);
        jSpinner2.setValue(picker.getjDatePickCalender().getTime());
        toDate.setTime((Date) jSpinner2.getValue());
        toFlag = true;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
      
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged

    }//GEN-LAST:event_jSpinner2StateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        int selected = jComboBox1.getSelectedIndex();
        switch(selected)
        {
            case 1:
                fromDate.add(Calendar.DAY_OF_YEAR, 1);
                toDate.add(Calendar.DAY_OF_YEAR, 1);
                break;
            case 2://one week
                fromDate.add(Calendar.WEEK_OF_YEAR, 1);
                toDate.add(Calendar.WEEK_OF_YEAR, 1);
                break;
            case 3: //one month
                fromDate.add(Calendar.MONTH, 1);
                toDate.add(Calendar.MONTH, 1);
                break;
            case 4://one year
                fromDate.add(Calendar.YEAR, 1);
                toDate.add(Calendar.YEAR, 1);
                break;
        }
        jSpinner1.setValue(fromDate.getTime());
        jSpinner2.setValue(toDate.getTime());
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        if(fromFlag)
        {
            jSpinner1.setValue(picker.getjDatePickCalender().getTime());
            fromDate.setTime((Date) jSpinner1.getValue());
            fromFlag = false;
        }
        
        if(toFlag)
        {
            jSpinner2.setValue(picker.getjDatePickCalender().getTime());
            toDate.setTime((Date) jSpinner2.getValue());
            toFlag = false;
        }
    }//GEN-LAST:event_formWindowGainedFocus

    private void jSpinner1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSpinner1MouseClicked

    }//GEN-LAST:event_jSpinner1MouseClicked

    private void jSpinner2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSpinner2MouseClicked

    }//GEN-LAST:event_jSpinner2MouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddEntryDialog dialog = new AddEntryDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTextArea bodyText;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextField subjectText;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Setter for currentDay field
     * @param currentDay
     */
    public void setCurrentDay(Calendar currentDay) {
        this.currentDay = currentDay;
    }

    /**
     *
     */
    public void setFromToDate() {

        if (aEntry != null)
        {
            
            fromDate.setTime(aEntry.getStart().getTime());
            toDate.setTime(aEntry.getEnd().getTime());
            
            jSpinner1.setValue(fromDate.getTime());
            jSpinner2.setValue(toDate.getTime());
        }
        else
        {
            
            fromDate = Calendar.getInstance();
            toDate = Calendar.getInstance();
            toDate.add(Calendar.HOUR, 1);
            fromDate.set(Calendar.DAY_OF_YEAR, currentDay.get(Calendar.DAY_OF_YEAR));
            toDate.set(Calendar.DAY_OF_YEAR, currentDay.get(Calendar.DAY_OF_YEAR));
            jSpinner1.setValue(fromDate.getTime());
            jSpinner2.setValue(toDate.getTime());
        }

    }

   /**
    * Give this class a pointer to the SessionState object.
    * @param session The SessionState
    */
   public void setSession(SessionState session)
   {
      this.session = session;
   }

    private boolean performCheck() {
        Boolean subj = false, body = false, dateTime = false, retVal = true;
        String sub = subjectText.getText();
        String bod = bodyText.getText();

        if(sub.equals(""))
            subj = true;
        if(bod.equals(""))
            body = true;
        dateTime = fromDate.after(toDate);

        if(subj||body||dateTime)
        {
            retVal = false;
        }
        return retVal;
    }
}
